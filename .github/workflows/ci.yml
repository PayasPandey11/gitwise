name: CI

on:
  push:
    branches: [ main ]
    tags:
      - 'v*'
      - 'test-v*'
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.9', '3.10', '3.11', '3.12']
        include:
          - python-version: '3.11'
            test-type: 'full'

    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pytest pytest-cov
        pip install -e ".[dev]"
    
    - name: Run tests
      run: |
        if [ "${{ matrix.test-type }}" = "full" ]; then
          python -m pytest tests/ --cov=gitwise --cov-report=xml
        else
          python -m pytest tests/  # Skip coverage for other versions
        fi
    
    # - name: Run linting
    #   if: matrix.test-type == 'full'  # Only run linting once
    #   run: |
    #     pip install flake8 black isort mypy
    #     flake8 gitwise tests
    #     black --check gitwise tests
    #     isort --check-only gitwise tests
    #     mypy gitwise tests || true  # Allow mypy to fail for now
    
    - name: Upload coverage
      if: matrix.test-type == 'full'  # Only upload coverage once
      uses: codecov/codecov-action@v5
      with:
        files: ./coverage.xml
        fail_ci_if_error: false

  bump-version:
    needs: test
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    outputs:
      new_version: ${{ steps.bump.outputs.new_version }}
    
    steps:
    - uses: actions/checkout@v3
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        fetch-depth: 0
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Configure git
      run: |
        git config --global user.name "github-actions[bot]"
        git config --global user.email "github-actions[bot]@users.noreply.github.com"
    
    - name: Bump version
      id: bump
      run: |
        # Get current version
        CURRENT_VERSION=$(python -c "exec(open('gitwise/__init__.py').read()); print(__version__)")
        echo "Current version: $CURRENT_VERSION"
        
        # Split version into parts
        IFS='.' read -r major minor patch <<< "$CURRENT_VERSION"
        
        # Get commit messages since last version bump
        COMMIT_MESSAGES=$(git log --oneline --grep="chore: bump version" --invert-grep --since="1 day ago" | head -10)
        echo "Recent commits:"
        echo "$COMMIT_MESSAGES"
        
        # Determine version bump type based on commit messages
        BUMP_TYPE="patch"  # Default to patch
        
        # Check for breaking changes (major bump)
        if echo "$COMMIT_MESSAGES" | grep -qE "(BREAKING|breaking|!:|feat!|fix!|^[a-z]+!:)"; then
          BUMP_TYPE="major"
        # Check for new features (minor bump)
        elif echo "$COMMIT_MESSAGES" | grep -qE "(feat|feature|add|new)"; then
          BUMP_TYPE="minor"
        # Check for fixes, docs, chores (patch bump)
        elif echo "$COMMIT_MESSAGES" | grep -qE "(fix|bug|doc|chore|refactor|perf|test)"; then
          BUMP_TYPE="patch"
        fi
        
        echo "Detected bump type: $BUMP_TYPE"
        
        # Calculate new version based on bump type
        if [ "$BUMP_TYPE" = "major" ]; then
          NEW_MAJOR=$((major + 1))
          NEW_VERSION="$NEW_MAJOR.0.0"
        elif [ "$BUMP_TYPE" = "minor" ]; then
          NEW_MINOR=$((minor + 1))
          NEW_VERSION="$major.$NEW_MINOR.0"
        else
          NEW_PATCH=$((patch + 1))
          NEW_VERSION="$major.$minor.$NEW_PATCH"
        fi
        
        echo "Version bump: $CURRENT_VERSION â†’ $NEW_VERSION ($BUMP_TYPE)"
        
        # Update version in __init__.py
        sed -i "s/__version__ = \"$CURRENT_VERSION\"/__version__ = \"$NEW_VERSION\"/" gitwise/__init__.py
        
        # Commit version bump
        git add gitwise/__init__.py
        git commit -m "chore: bump version to $NEW_VERSION [skip ci]"
        git push
        
        # Set output for other jobs
        echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT

  test-deploy:
    needs: bump-version
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v3
      with:
        ref: main  # Get the latest commit with version bump
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build twine
    
    - name: Build and publish to TestPyPI
      env:
        TWINE_USERNAME: __token__
        TWINE_PASSWORD: ${{ secrets.TEST_PYPI_API_TOKEN }}
      run: |
        echo "Publishing version ${{ needs.bump-version.outputs.new_version }} to TestPyPI"
        python -m build
        twine upload --repository testpypi dist/* --verbose 

  deploy:
    needs: bump-version
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v3
      with:
        ref: main  # Get the latest commit with version bump
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build twine
    
    - name: Build and publish to PyPI
      env:
        TWINE_USERNAME: __token__
        TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}
      run: |
        echo "Publishing version ${{ needs.bump-version.outputs.new_version }} to PyPI"
        python -m build
        twine upload dist/* --verbose 